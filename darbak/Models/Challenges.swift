//
//  Challenges.swift
//  darbak
//
//  Created by Assistant on $(DATE)
//

import Foundation
import GameKit

struct Challenge: Identifiable {
    let id = UUID()
    let imageName: String
    let prompt: String
    let emojis: [String]
    let totalPhotos: Int
    let modelName: String
    let hasAI: Bool
    let isColorChallenge: Bool
    let targetColor: String?
    
    init(imageName: String, prompt: String, emojis: [String], totalPhotos: Int, modelName: String, hasAI: Bool, isColorChallenge: Bool = false, targetColor: String? = nil) {
        self.imageName = imageName
        self.prompt = prompt
        self.emojis = emojis
        self.totalPhotos = totalPhotos
        self.modelName = modelName
        self.hasAI = hasAI
        self.isColorChallenge = isColorChallenge
        self.targetColor = targetColor
    }
    
    var fullTitle: String {
        return "ÿµŸàÿ± \(prompt) ÿÆŸÑÿßŸÑ ÿ•ŸÜÿ¨ÿßÿ≤ŸÉ ŸáÿØŸÅ ÿßŸÑŸäŸàŸÖ"
    }
}

// MARK: - Competition Models
struct PhotoChallengeRace: Identifiable, Codable {
    let id = UUID()
    let challengeId: UUID
    let player1Id: String
    let player2Id: String
    let player1Name: String
    let player2Name: String
    let dailyGoal: Int
    let startDate: Date
    let endDate: Date
    let status: RaceStatus
    let winnerId: String?
    
    var isActive: Bool {
        return status == .active && Date() <= endDate
    }
    
    var timeRemaining: TimeInterval {
        return max(0, endDate.timeIntervalSince(Date()))
    }
}

enum RaceStatus: String, Codable {
    case active = "active"
    case completed = "completed"
    case cancelled = "cancelled"
}

struct RaceProgress: Codable {
    let playerId: String
    let playerName: String
    let completedPhotos: Int
    let dailyGoalProgress: Int
    let lastUpdate: Date
    let isCompleted: Bool
    
    var progressPercentage: Double {
        return min(1.0, Double(completedPhotos) / Double(4)) // Assuming 4 photos per challenge
    }
    
    var dailyGoalPercentage: Double {
        return min(1.0, Double(dailyGoalProgress) / Double(10000)) // Assuming 10k daily goal
    }
}

struct RaceInvitation: Codable {
    let raceId: String
    let challengeId: String
    let challengerName: String
    let challengeName: String
    let dailyGoal: Int
    let sentDate: Date
}

struct PersistedRacesData: Codable {
    let races: [PhotoChallengeRace]
    let progress: [String: RaceProgress]
}

class ChallengesData {
    static let shared = ChallengesData()
    
    private init() {}
    
    let challenges: [Challenge] = [
        Challenge(imageName: "StopSign", prompt: "4 ÿπŸÑÿßŸÖÿßÿ™ ŸÇŸÅ", emojis: ["üõë", "üö¶", "‚ö†Ô∏è", "üö∏", "üìç", "üõ§Ô∏è"], totalPhotos: 4, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Car", prompt: "4 ÿ≥Ÿäÿßÿ±ÿßÿ™", emojis: ["üöå", "üöç", "üöê", "üöé", "üöó", "üöï"], totalPhotos: 4, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Bus", prompt: "3 ÿ®ÿßÿµÿßÿ™", emojis: ["üöå", "üöç", "üöê", "üöé", "üöó", "üöï"], totalPhotos: 3, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Cat", prompt: "3 ŸÇÿ∑ÿ∑", emojis: ["üêà", "üê±", "üêà‚Äç‚¨õ", "üò∏", "üêæ"], totalPhotos: 3, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Birds", prompt: "4 ÿ∑ŸäŸàÿ±", emojis: ["üê¶", "üê•", "ü¶ú", "ü¶§", "üïäÔ∏è", "ü™ø"], totalPhotos: 4, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "TrafficLight", prompt: "3 ÿßÿ¥ÿßÿ±ÿßÿ™ ŸÖÿ±Ÿàÿ±", emojis: ["üö¶", "üö•", "üöò", "‚ö†Ô∏è", "üõ£Ô∏è", "üö¶"], totalPhotos: 3, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Cat", prompt: "4 ÿ≥ŸäÿßŸÉŸÑ", emojis: ["üö¥üèº", "üöµüèº", "üö≤", "üö¥üèº‚Äç‚ôÄÔ∏è", "üö≤", "üöµüèº"], totalPhotos: 4, modelName: "YOLOv3TinyInt8LUT", hasAI: true),
        Challenge(imageName: "Colors", prompt: "7 ÿ£ÿ¥Ÿäÿßÿ° ÿÆÿ∂ÿ±ÿßÿ°", emojis: ["üü¢", "üçÉ", "üåø", "ü•í", "üçè", "üß©"], totalPhotos: 7, modelName: "ColorDetection", hasAI: true, isColorChallenge: true, targetColor: "green"),
        Challenge(imageName: "Colors", prompt: "5 ÿ£ÿ¥Ÿäÿßÿ° ÿ≤ÿ±ŸÇÿßÿ°", emojis: ["üë§", "üü¶", "üß¢", "üíô", "üìò", "üîµ"], totalPhotos: 5, modelName: "ColorDetection", hasAI: true, isColorChallenge: true, targetColor: "blue"),
        Challenge(imageName: "Colors", prompt: "5 ÿ£ÿ¥Ÿäÿßÿ° ÿ≠ŸÖÿ±ÿßÿ°", emojis: ["üçé", "üöó", "üõë", "üçÖ", "‚ô¶Ô∏è", "ü•§"], totalPhotos: 5, modelName: "ColorDetection", hasAI: true, isColorChallenge: true, targetColor: "red")
    ]
}
